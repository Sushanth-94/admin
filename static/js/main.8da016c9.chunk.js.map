{"version":3,"sources":["components/searchBar/SearchBar.js","components/adminTable/AdminTable.js","components/pagination/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","inputValue","handleInputChange","className","type","placeholder","value","onChange","e","target","AdminTable","data","onDeleteItem","editMode","editItem","onToggleEdit","useState","selectedCheckboxes","setselectedCheckboxes","id","selected","checkboxFound","indexOf","splice","length","ids","map","dat","push","tableHeader","name","checked","includes","tableData","isSelected","style","backgroundColor","email","role","icon","faCheck","onClick","faEdit","faTrash","tableFooter","Fragment","Pagination","pages","onPageChange","totPages","Math","ceil","pageCount","forcePage","disabledClassName","initialPage","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","subContainerClassName","breakLinkClassName","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","activeClassName","App","setinputValue","settableData","filteredData","setfilteredData","toggleEdit","settoggleEdit","currentPage","setcurrentPage","totDataCount","setTotDataCount","useEffect","fetchData","URL","a","fetch","jsonResp","json","decodedResp","console","log","pageNum","count","fetchedData","filter","toLowerCase","index","val","newfilteredData","searchFilter","selectedItem","findIndex","filteredItems","onEditItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da016c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar({ inputValue, handleInputChange }) {\r\n  return (\r\n    <header className=\"headerContainer\">\r\n      <input\r\n        className=\"inputContainer\"\r\n        type=\"text\"\r\n        placeholder=\"Search by name, email or role\"\r\n        value={inputValue}\r\n        onChange={(e) => handleInputChange(e.target.value)}\r\n      />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { useState } from \"react\";\r\nimport \"./AdminTable.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction AdminTable({ data, onDeleteItem, editMode, editItem, onToggleEdit }) {\r\n  const [selectedCheckboxes, setselectedCheckboxes] = useState([]);\r\n\r\n  const onChange = (id) => {\r\n    let selected = [...selectedCheckboxes];\r\n    let checkboxFound = selectedCheckboxes.indexOf(id);\r\n    if (id === \"0\") {\r\n      if (checkboxFound > -1) {\r\n        selected.splice(0, selected.length);\r\n      } else {\r\n        const ids = data.map((dat) => {\r\n          return `${dat.id}`;\r\n        });\r\n        selected.push(\"0\", ...ids);\r\n      }\r\n    } else {\r\n      if (checkboxFound > -1) {\r\n        selected.splice(checkboxFound, 1);\r\n      } else {\r\n        selected.push(id);\r\n      }\r\n    }\r\n    setselectedCheckboxes(selected);\r\n  };\r\n\r\n  const tableHeader = (\r\n    <section className=\"gridWrapper\">\r\n      <div className=\"grid\">\r\n        <input\r\n          name={\"Select all\"}\r\n          value={\"Select all\"}\r\n          type=\"checkbox\"\r\n          onChange={() => onChange(\"0\")}\r\n          checked={selectedCheckboxes.includes(\"0\")}\r\n        />\r\n      </div>\r\n      <div className=\"grid\">Name</div>\r\n      <div className=\"grid\">Email</div>\r\n      <div className=\"grid\">Role</div>\r\n      <div className=\"grid\">Actions</div>\r\n    </section>\r\n  );\r\n\r\n  const tableData = data.map((dat) => {\r\n    const isSelected = selectedCheckboxes.includes(dat.id);\r\n    return (\r\n      <section\r\n        className=\"gridWrapper\"\r\n        key={dat.id}\r\n        style={{\r\n          backgroundColor: isSelected ? \"#dfd7d733\" : \"white\",\r\n        }}\r\n      >\r\n        <div className=\"childGrid\">\r\n          <input\r\n            onChange={() => onChange(dat.id)}\r\n            checked={isSelected}\r\n            name={dat.id}\r\n            value={dat.id}\r\n            type=\"checkbox\"\r\n          />\r\n        </div>\r\n        <div className=\"childGrid\">\r\n          {editMode === dat.id ? (\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={dat.name}\r\n              onChange={(e) => {\r\n                editItem(e.target.value, dat.id, e.target.name);\r\n              }}\r\n            />\r\n          ) : (\r\n            dat.name\r\n          )}\r\n        </div>\r\n        <div className=\"childGrid\">\r\n          {editMode === dat.id ? (\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              value={dat.email}\r\n              onChange={(e) => {\r\n                editItem(e.target.value, dat.id, e.target.name);\r\n              }}\r\n            />\r\n          ) : (\r\n            dat.email\r\n          )}\r\n        </div>\r\n        <div className=\"childGrid\">\r\n          {editMode === dat.id ? (\r\n            <input\r\n              type=\"text\"\r\n              name=\"role\"\r\n              value={dat.role}\r\n              onChange={(e) => {\r\n                editItem(e.target.value, dat.id, e.target.name);\r\n              }}\r\n            />\r\n          ) : (\r\n            dat.role\r\n          )}\r\n        </div>\r\n        <div className=\"childGrid\">\r\n          {editMode === dat.id ? (\r\n            <FontAwesomeIcon\r\n              icon={faCheck}\r\n              onClick={() => onToggleEdit(\"\")}\r\n              className=\"checkIcon\"\r\n            />\r\n          ) : (\r\n            <FontAwesomeIcon\r\n              icon={faEdit}\r\n              onClick={() => onToggleEdit(dat.id)}\r\n              className=\"editIcon\"\r\n            />\r\n          )}\r\n          <FontAwesomeIcon\r\n            onClick={() => onDeleteItem(dat.id)}\r\n            icon={faTrash}\r\n            className=\"delIcon\"\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n\r\n  const tableFooter = (\r\n    <button\r\n      className=\"deleteSelectedBtn\"\r\n      onClick={() => {\r\n        setselectedCheckboxes([]);\r\n        onDeleteItem(selectedCheckboxes);\r\n      }}\r\n    >\r\n      Delete selected\r\n    </button>\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      {tableHeader}\r\n      {tableData}\r\n      {tableFooter}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AdminTable;\r\n","import React from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport \"./Pagination.css\";\r\n\r\nfunction Pagination({ pages, onPageChange }) {\r\n  const totPages = pages && pages > 0 ? Math.ceil(pages / 10) : 0;\r\n\r\n  return (\r\n    // <div>\r\n    <ReactPaginate\r\n      pageCount={totPages}\r\n      onPageChange={({ selected }) => onPageChange(selected)}\r\n      forcePage={0}\r\n      disabledClassName=\"disabled\"\r\n      initialPage={0}\r\n      previousLabel=\"Previous\"\r\n      nextLabel=\"Next\"\r\n      breakLabel=\"...\"\r\n      breakClassName=\"break-me\"\r\n      marginPagesDisplayed={2}\r\n      pageRangeDisplayed={5}\r\n      subContainerClassName=\"pages pagination\"\r\n      breakLinkClassName=\"page-link\"\r\n      containerClassName=\"pagination\"\r\n      pageClassName=\"page-item\"\r\n      pageLinkClassName=\"page-link\"\r\n      previousClassName=\"page-item\"\r\n      previousLinkClassName=\"page-link\"\r\n      nextClassName=\"page-item\"\r\n      nextLinkClassName=\"page-link\"\r\n      activeClassName=\"active\"\r\n    />\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport SearchBar from \"./components/searchBar/SearchBar\";\r\nimport AdminTable from \"./components/adminTable/AdminTable\";\r\nimport \"./index.css\";\r\nimport Pagination from \"./components/pagination/Pagination\";\r\n\r\nexport default function App() {\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n  const [tableData, settableData] = useState([]);\r\n  const [filteredData, setfilteredData] = useState([]);\r\n  const [toggleEdit, settoggleEdit] = useState(\"\");\r\n  const [currentPage, setcurrentPage] = useState(0);\r\n  const [totDataCount, setTotDataCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const URL =\r\n      \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\";\r\n    fetchData(URL);\r\n  }, []);\r\n\r\n  const fetchData = async (URL) => {\r\n    try {\r\n      const jsonResp = await fetch(URL);\r\n      const decodedResp = await jsonResp.json();\r\n      settableData(decodedResp);\r\n      setTotDataCount(decodedResp.length);\r\n      onPageChange(0, decodedResp);\r\n      // setfilteredData(decodedResp);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onPageChange = (pageNum, data) => {\r\n    // 0\r\n    const count = 10 * (pageNum + 1);\r\n    const existingData = data\r\n      ? data\r\n      : inputValue.length > 0\r\n      ? tableData.filter((dat) => {\r\n          return (\r\n            dat.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n            dat.email.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n            dat.role.toLowerCase().includes(inputValue.toLowerCase())\r\n          );\r\n        })\r\n      : tableData;\r\n    const fetchedData = existingData.filter((dat, index) => {\r\n      return index >= count - 10 && index < count;\r\n    });\r\n    setfilteredData(fetchedData);\r\n    setcurrentPage(pageNum);\r\n  };\r\n\r\n  const searchFilter = (val) => {\r\n    setinputValue(val);\r\n    const newfilteredData = tableData.filter((dat) => {\r\n      return (\r\n        dat.name.toLowerCase().includes(val.toLowerCase()) ||\r\n        dat.email.toLowerCase().includes(val.toLowerCase()) ||\r\n        dat.role.toLowerCase().includes(val.toLowerCase())\r\n      );\r\n    });\r\n    setTotDataCount(newfilteredData.length);\r\n    onPageChange(currentPage, newfilteredData, true);\r\n    // setfilteredData(newfilteredData);\r\n  };\r\n\r\n  const onDeleteItem = (id) => {\r\n    const ids = typeof id === \"string\" ? [id] : [...id];\r\n    const filteredData = tableData.filter((dat) => {\r\n      return !ids.includes(dat.id);\r\n    });\r\n    settableData(filteredData);\r\n    setTotDataCount(filteredData.length);\r\n    onPageChange(currentPage, filteredData);\r\n    // setfilteredData(filteredData);\r\n    setinputValue(\"\");\r\n  };\r\n\r\n  const onEditItem = (value, id, val) => {\r\n    const selectedItem = tableData.findIndex((dat) => dat.id === id);\r\n    const filteredItems = [...tableData];\r\n    filteredItems[selectedItem][val] = value;\r\n\r\n    settableData(filteredItems);\r\n    onPageChange(currentPage, filteredItems);\r\n    setinputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"appContainer\">\r\n      <SearchBar\r\n        inputValue={inputValue}\r\n        handleInputChange={(val) => {\r\n          searchFilter(val);\r\n        }}\r\n      />\r\n      <AdminTable\r\n        data={filteredData}\r\n        onDeleteItem={onDeleteItem}\r\n        editMode={toggleEdit}\r\n        editItem={(val, id, name) => onEditItem(val, id, name)}\r\n        onToggleEdit={(val) => settoggleEdit(val)}\r\n      />\r\n      <Pagination pages={totDataCount} onPageChange={onPageChange} />\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}